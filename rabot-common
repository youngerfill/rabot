#!/bin/bash

[ -n "$RABOT_COMMON" ] && return || readonly RABOT_COMMON=1


############################################################
#                                                          #
#    Some utility functions used by the 'rabot' scripts    #
#                                                          #
############################################################


############################################################
#
# Exits bash script after printing a message to stderr
#
# exitWith EXITSTAUS MESSAGE
#
# EXITSTATUS : (default 1) the exit status
# MESSAGE : (default empty) the message
#
function exitWith
{
    if [ -n "$2" ]; then
        echo "$2" >&2
    fi
    if [ -n "$1" ]; then
        exit "$1"
    else
        exit 1
    fi
}


############################################################
#
# Exits bash script and prints a message to stderr if a previous
# command returned with a non-zero exit status. Do nothing
# otherwise.
#
# exitOnError EXITSTATUS MESSAGE
#
# EXITSTATUS : (default 1) the exit status
# MESSAGE : (default empty) the message
#
# Warning: If bash commands are executed on-the-fly to produce the
#          message string, the exit status of the previous command
#          will be reset before control reaches the body of the
#          function 'exitOnError'. For example, the following command:
#
#               exitOnError 1 "The directory: $(pwd) is empty"
#
#          will never abort the script as long as the 'pwd' command
#          succeeds.
#
function exitOnError
{
    exitStatus="$?"

    if [ "$exitStatus" -ne "0" ]; then
        exitWith ${1:-1} "Error: ${2:-unknown}"
    fi
}


############################################################
#
# Tests whether one directory is a subdirectory of another.
# Prints result to stdout. Both directories must exist.
#
# isSubdirOf DIR1 DIR2
#
# DIR1 : the candidate subdirectory
# DIR2 : the candidate parent (or grandparent etc...) directory
#
function isSubdirOf
{
    if [ -z "$1" -o -z "$2" ]; then
        exitWith 1 "Error: the function isSubdirOf requires 2 arguments."
    fi

    if [ ! -d "$(dirname "$1")" ]; then
        exitWith 1 "Error: the parent dir of '$1' doesn't exist"
    fi

    if [ ! -d "$(dirname "$2")" ]; then
        exitWith 1 "Error: the parent dir of '$2' doesn't exist"
    fi

    realDir1="$(readlink -f "$1")"
    realDir2="$(readlink -f "$2")"

    lengthMatched="$(expr match "$realDir1" "$realDir2")"
    if [ "$lengthMatched" -eq "${#realDir2}" ]; then
        echo true
    else
        echo false
    fi
}


############################################################
#
# Checks whether a given file is a text file.
# Returns 0 for true and 1 for false
#
# isTextFile FILE
#
function isTextFile
{
    if [ "$(file --mime-type "$1" | cut -d':' -f 2 | cut -d'/' -f 1 | sed "s/^[[:space:]]*//g" | sed "s/[[:space:]]*$//g")" = "text" ]; then
        true
    else
        false
    fi
}


############################################################
#
# Checks whether a given directory has no subdirectories
# Returns 0 for true and 1 for false
#
# isLeafDir DIR
#
function isLeafDir
{
    if [ -z "$1" ]; then
        false

    elif [ ! -d "$1" ]; then
        false

    elif [ "$(find "$1" -type d | wc -l)" != "1" ]; then
        false

    else
        true

    fi
}

############################################################
#
# Checks whether a given directory is empty
# Returns 0 for true and 1 for false
#
# isEmptyDir DIR
#
function isEmptyDir
{
    if [ -z "$1" ]; then
        false

    elif [ ! -d "$1" ]; then
        false

    elif [ "$(find "$1" | wc -l)" != "1" ]; then
        false

    else
        true

    fi
}

############################################################
#
# Checks whether a given executable is available.
# Terminates the script when not.
#
# require EXEC
#
function require
{
    which "$1" > /dev/null 2>&1
    exitOnError 1 "Required command: '$1' not found"
}


############################################################
#
# Prints all 'require'd executables of a given script.
# Descends recursively into 'require'd scripts.
#
# showReq SCRIPT
#
function showReq
{
    if [ -z "$1" ]; then
        exitWith 1  "Error: 'showReq' requires an argument"
    fi

    function processRequirements
    {
        while read line; do
            toolName="$(grep -o '\S\S*$' <<<$line)"
            showReq_core "$toolName"
        done < <(grep "^require\s\s*\S\S*\s*$" "$1")
    }

    function showReq_core
    {
        pathToCommand="$(which "$1")"
        if [ "$?" -ne "0" ]; then
            echo "'$1' not found" >&2
        else
            echo "$(basename "$pathToCommand")"
            if isTextFile "$pathToCommand"; then
                processRequirements "$pathToCommand"
            fi
        fi
    }

    processRequirements "$1"
}


############################################################
#
# Terminates the script when not root
#
# rootOnly [MESSAGE]
#
# MESSAGE : Optional custom message to print
#           on stderr when exiting.
#
function rootOnly
{
    message="$1"
    : ${message:="You must be root"}

    if [ "$EUID" -ne 0 ]; then
    exitWith 1 "$message"
    fi
}


############################################################
#
# Prints the script's help
#
function showHelp
{
    rgxbegin="^ *: *<< *DOCSTRING *$"
    rgxend="^ *DOCSTRING *$"
    printLine=false
    IFS=''

    while read line; do

        if [[ "$line" =~ $rgxend ]]; then
            printLine=false
        fi

        if $printLine; then
            # eval is used to allow variable
            # substitution in docstring
            eval echo "\"$line\""
        fi

        if [[ "$line" =~ $rgxbegin ]]; then
            printLine=true
        fi

    done < "$0"

    exit 0
}


############################################################
#
# Prints help if requested on command line
#
function checkForHelp
{
    if [ "$1" = "--help" ]; then
        showHelp
    fi
}


############################################################
#
# Try to acquire a lock. If the lock can't be acquired,
# wait either indefinitely or for a specified number of
# seconds.
#
# acquireLock LOCKNAME [TIMEOUT_SECONDS]
#
# LOCKNAME : the name of the lock
# TIMEOUT_SECONDS : the amount of time to wait before
#                   giving up. Can be 0 for immediate
#                   return.
#
# Examples:
#
# Try to acquire a lock, and if not (yet) possible,
# wait indefinitely for it:
#
#   acquireLock mylock
#
#
# Try to acquire a lock, and if not (yet) possible,
# give up immediately:
#
#   acquireLock mylock 0
#
#
# Try to acquire a lock, and if not (yet) possible,
# wait for 5 seconds before giving up:
#
#   acquireLock mylock 5
#
function acquireLock
{
    if [ -z "$1" ]; then
        exitWith 1 "Error: $FUNCNAME() needs at least one argument."
    fi

    lockFile="/var/lock/$1"
    exec {FD}>"$lockFile"
    trap "flock -u $FD; flock -xn $FD && rm -f $lockFile" EXIT;

    [[ -z "$2" ]] && waitArgs="" || waitArgs="-w $2 "
    flock -x $waitArgs"$FD"
}


############################################################
#
# Allow only one instance of the script running at the time.
# Exits the script immediately or wait indefinitely if another
# instance is detected.
#
# Examples:
#
# Exits immediately if another instance detected:
#
#   oneInstance
#
#
# Wait idnefinitely if another instance detected:
#
#   oneInstance block
#
function oneInstance
{
    lockName="$(basename "$0")"
    [[ "$1" = "block" ]] && timeout="" || timeout="0"

    acquireLock "$lockName" "$timeout"
    exitOnError 1 "An instance of this script is already running."
}


############################################################
#
# Check if the command line has the minimum required number
# of arguments.
#
# Example:
#
# Exits with an error if the number of arguments is < 2:
#
#   minNumArgs 2
#
function minNumArgs
{
    if [ "$2" -lt "$1" ]; then
        echo "$(basename "$0"): missing operand"
        exitWith 1 "Try '$(basename "$0") --help' for more information."
    fi
}


############################################################
#
# Echo the elapsed time between two given moments
# in a human-readable format.
#
# elapsedTime START END [LONG]
#
# START : the start time in seconds
# END : the end time in seconds
# LONG : use the long format (the argument value can be anything)
#
# Examples:
#
# $ elapsedTime 10 1000
# 16m 30s
#
# $ elapsedTime 10 1234567 L
# 14 days 6 hours 55 minutes and 57 seconds
#
function elapsedTime
{
    if [ -z "$2" ]; then
        exitWith 1 "Error: $FUNCNAME() needs at least two arguments."
    fi

    if [ -n "$3" ]; then
        local ds=" days "
        local hs=" hours "
        local ms=" minutes "
        local as="and "
        local ss=" seconds"
    else
        local ds="d "
        local hs="h "
        local ms="m "
        local as=""
        local ss="s"
    fi

    local T=$(expr $2 - $1)
    local D=$((T/60/60/24))
    local H=$((T/60/60%24))
    local M=$((T/60%60))
    local S=$((T%60))

    (( $D > 0 )) && echo -n "$D$ds"
    (( $H > 0 )) && echo -n "$H$hs"
    (( $M > 0 )) && echo -n "$M$ms"
    (( $D > 0 || $H > 0 || $M > 0 )) && echo -n "$as"
    echo "$S$ss"
}


############################################################
#
# Look for all executable files in the 'FOLDER' directory
# tree and calls them one by one with the option '--help'.
# In between the resulting output, markup is added in the
# reStructuredText format.
#
function allHelp
{
    while read fullname; do
        name="$(basename "$fullname")"
        echo $name
        echo $name | tr [:print:] '-'
        echo ::
        echo
        $fullname --help | sed "s/^/  /" | sed "s/[[:space:]]*$//"
        echo
    done < <(fnd $1 -executable ! -type d | sort)
}


############################################################
#
# Create contents of README.rst file
#
function docRabot
{
    toolsDirtree="$(rabot-vars rabotDir)"
    cat "$toolsDirtree/readme-part.txt"
    echo
    allHelp "$toolsDirtree"
}

